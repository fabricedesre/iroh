syntax = "proto3";

package p2p;

import "google/protobuf/empty.proto";

service P2p {
  rpc Version(google.protobuf.Empty) returns (VersionResponse) {}
  rpc FetchBitswap(BitswapRequest) returns (BitswapResponse) {}
  rpc FetchProvider(Key) returns (Providers) {}
  rpc GetListeningAddrs(google.protobuf.Empty) returns (GetListeningAddrsResponse) {}
  rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse) {}
  rpc PeerConnect(ConnectRequest) returns (ConnectResponse) {}
  rpc PeerDisconnect(DisconnectRequest) returns (google.protobuf.Empty) {}
  rpc Shutdown(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

message VersionResponse {
  string version = 1;
}

message BitswapRequest {
  // Serialized CID of the requested block.
  bytes cid = 1;
  Providers providers = 2;
}

message BitswapResponse {
  bytes data = 1;
}

message Providers {
  // List of providers. Serialized PeerIds
  repeated bytes providers = 1;
}

message Key {
  bytes key = 1;
}

message GetListeningAddrsResponse {
  // Serialized peer id
  bytes peer_id = 1;
  // Serialized list of multiaddrs
  repeated bytes addrs = 2;
}

message GetPeersResponse {
  // map of peer ids to a list of multiaddrs
  // gRpc maps cannot have `bytes` as a key, so using `string` instead
  // gRpc maps cannot have `repeated` as part of the value, so abstrating
  // the list of serialized Multiaddr as a protobuf type `Multiaddrs`
  map<string, Multiaddrs> peers = 1;
}

message ConnectRequest {
  // Serialized peer id
  bytes peer_id = 1; 
  // Serialized list of multiaddrs
  repeated bytes addrs = 2;
}

message ConnectResponse {
  bool success = 1; 
}

message DisconnectRequest {
  // Serialized peer id
  bytes peer_id = 1;
}

message Multiaddrs {
  // Serialized list of multiaddrs
  repeated bytes addrs = 1;
}
